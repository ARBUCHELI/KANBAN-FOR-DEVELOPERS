# 1. LEAN AND KANBAN
--------------------

* What is Lean Thinking?
------------------------
. Kanban uses the lean mindset

. Lean thinking is not a methodology

. Lean thinking is a mindset based on specific values

. Each value comes with thinking tools to help frame them in a project context



* Lean Values
-------------
. Eliminate waste

. Amplify learning

. Decide as late as possible

. Deliver as fast as possible

. Empower the team

. Build integrity in 

. See the whole


* Value Breakdown
-----------------

	* Eliminate waste
	-----------------
		. Create value over processes: trim the fat, even if it goes against "the way it's done."

		Thinking tools
		--------------
		. Seeing waste


	* Amplify Learning
	------------------
		. Constantly recycle experience and feedback into the development process.

		Thinking tools
		--------------
		. Feedback, iterations
		
		. Synchronization, set-based development


	* Decide as late as possible
	----------------------------
		. Project decisions are the most informed with the most information.

		Thinking tools
		--------------
		. The last responsible moment


	* Deliver as fast as possible
	-----------------------------
		. Software delivery should be sustainable, not hacked together from late nights and wasteful processes

		Thinking tools
		--------------
		. Pull systems

		. Queuing theory
	
		. Cost of delay


	* Build integrity in 
	--------------------
		. Ensure the product delivers value and intuitive experiences to customers, while staying true to its developers.

		Thinking tools
		--------------
		. Internal: refactoring, testing

		. External: perceived vs. conceptual


	* Empower the team
	------------------
		. Committed teams and energized workers always trump forced marches and long nights

		Thinking tools
		--------------
		. Self-determination, motivation

		. Leadership, expertise


	* See the whole
	---------------
		. Objectively assessing the macro-level status of a project is more important than building individual features

		Thinking tools
		--------------
		. Measurements


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Kanban principles
-------------------

* Kanban in practice
--------------------
. A method to improve a software development process

. Complete with its own principles and practices

. Can only be applied to an existing development process

. Can have shallow (partial) or deep (full) implementations



* Kanban principles
-------------------
. Start with what you do now

. Agree to pursue incremental, evolutionary change

. Initially, respect current roles, responsibilities, and job titles

. Encourage acts of leadership at every level



* Principle Breakdown
--------------------
	
	* Start with what you do now
	----------------------------
		. Define how your team develops software now

		. Lay out the policies, or rules and steps you typically follow

		. Make sure everyone is on the same page


	* Agree to pursue incremental, evolutionary change
	--------------------------------------------------
		. It's a marathon, not a sprint

		. Kanban is a team sport
	
		. Incremental, meaningful change can only happen with everyone on board


	* Initially, respect current roles, responsibilities, and job titles
	--------------------------------------------------------------------
		. Don't tear down everything because you think a blank slate will help

		. Development processes are made up of different roles, and these structures are important in understanding and improving your work


	* Encourage acts of leadership at all levels
	--------------------------------------------
		. You can't empower a team or get them to freely commit to the work at hand with top-down management.

		. Everyone needs to have the opportunity to be valued and lead when appropriate.


* So Why Kanban?
----------------
. How much value are you really delivering?

. Is it what the users are asking for?

. Are they deliverd on time?

. Is the development pace sustainable?


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Core principles
-----------------

* The Big Six
-------------
. Visualize

. Limit work in progress (WIP)

. Manage flow

. Make policies explicit

. Implement feedback loops

. Improve collaboratively, evolve exponentially

	* Visualize
	-----------
		. Lay out the actual development steps your team follows

		. Can be done by creating value stream or workflow maps


	* Limit WIP
	-----------
		. Sets limits on active work items in each column of the board

		. Helps create a sustainable pace and identifies potential bottlenecks

		. Creates a natural focus on the work at hand


	* Manage Flow
	-------------
		. Flow is measured by how fast work items move across the board

		. Good flow comes from finishing work items without overburdening the system

		. Bad flow comes from bottlenecks and waste

		. Maximized flow delivers work items while allowing enough time for feedback


	* Make Policies Explicit
	------------------------
		. Defining the steps and rules of a development process keeps everyone honest and informed

		. All policies should be clearly written out or included in the Kanban board


	* Implement Feedback Loops
	--------------------------
		. Important to take stock of how process change are working

		. Identify any tweaks and make sure that product feedback has enough time to make it into development

	
	* Improve Collaboratively, Evolve Exponentially
	-----------------------------------------------
		. It's all about change over time

		. Empower your team, always amplify learning, and see the whole

		. Make decisions as a unit, experiment as a team

------------------------------------------------------------------------------------------------------------------------------------------------------------------


































































	

	